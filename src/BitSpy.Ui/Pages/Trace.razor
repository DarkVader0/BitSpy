@page "/traces"
@using BitSpy.Ui.Response
@inject HttpClient client

<PageTitle>Traces</PageTitle>

<h1>Traces</h1>


<input type="text" @bind="_searchTerm" placeholder="Search by trace name..." />
<button @onclick="Search">Search</button>

@if (_traces.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Duration</th>
            <th>Attributes</th>
            <th>Events</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var trace in _traces)
        {
            <tr>
                <td>@trace.Name</td>
                <td>@trace.Duration.ToString()</td>
                <td>
                    <ul>
                        @foreach (var a in trace.Attributes)
                        {
                            <li>@a.Name: @a.Value</li>
                        }
                    </ul>
                </td>
                <td>
                    <ul>
                        @foreach (var eventRelationship in trace.Events)
                        {
                            <li>@eventRelationship.Event.Name</li>
                            <li>@eventRelationship.EventAvgDuration.ToString()</li>
                            
                        }
                    </ul>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<TraceResponse> _traces = new();
    
    private string _searchTerm = string.Empty;
    

    protected override async Task OnInitializedAsync()
    {
        var response = await client.GetAsync($"{ApiConstants.ApiUrl}/bottleneck/traces");
        _traces = await response.Content.ReadFromJsonAsync<List<TraceResponse>>() ?? new();
        _traces.ForEach(x => Console.WriteLine("{0} {1}", x.Name, x.Duration));
    }
    
    private async Task Search()
    {
        var response = await client.GetAsync($"{ApiConstants.ApiUrl}/bottleneck/traces?name={_searchTerm}");
        _traces = await response.Content.ReadFromJsonAsync<List<TraceResponse>>() ?? new();
        await InvokeAsync(StateHasChanged);
    }

}