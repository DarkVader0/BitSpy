@page "/traces"
@using BitSpy.Ui.Response
@inject HttpClient client

<PageTitle>Traces</PageTitle>

<h1>Traces</h1>
@foreach (var trace in traces)
{
    <div class="border-1">
        <h2>@trace.Name</h2>

        @foreach (var traceAttribute in trace.Attributes)
        {
            <p>@traceAttribute.Name: @traceAttribute.Value</p>
        }

        <div class="chart">
            @{
                var maxDuration = (trace.EndTime - trace.StartTime).TotalMilliseconds;
                var duration = (trace.Events[0].Timestamp - trace.StartTime).TotalMilliseconds;
            }

            <div class="bar" style="width: @(duration / maxDuration * 100)%">
                <span>@trace.Name: @duration ms</span>
            </div>
            @{
                var cumulativeDuration = 0.0;
                for (var i = 0; i < trace.Events.Count - 1; i++)
                {
                    duration = (trace.Events[i + 1].Timestamp - trace.Events[i].Timestamp).TotalMilliseconds;
                    cumulativeDuration += duration;
                    <div class="bar" style="width: @(duration / maxDuration * 100)%; margin-left: @(cumulativeDuration / maxDuration * 100)%">
                        <span>@trace.Events[i].Name: @duration ms</span>
                    </div>
                }

                var lastDuration = (trace.EndTime - trace.Events[^1].Timestamp).TotalMilliseconds;
                cumulativeDuration += lastDuration;
                <div class="bar" style="width: @(lastDuration / maxDuration * 100)%; margin-left: @(cumulativeDuration / maxDuration * 100)%">
                    <span>@trace.Events[^1].Name: @lastDuration ms</span>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<TraceResponse> traces = new();

    protected override async Task OnInitializedAsync()
    {
        traces.Add(new TraceResponse
        {
            Name = "test",
            StartTime = DateTime.Now,
            EndTime = DateTime.Now.AddMilliseconds(200),
            Attributes = new List<AttributeResponse>()
            {
                new AttributeResponse()
                {
                    Name = "Tessst",
                    Value = "Test"
                },
                new AttributeResponse()
                {
                    Name = "Tessst",
                    Value = "Test"
                }
            },
            Events = new List<EventResponse>()
            {
                new EventResponse
                {
                    Name = "Method1",
                    Message = "eeee",
                    Timestamp = DateTime.Now.AddMilliseconds(50),
                    Attributes = null
                },
                new EventResponse
                {
                    Name = "Method2",
                    Message = "eeee",
                    Timestamp = DateTime.Now.AddMilliseconds(100),
                    Attributes = null
                },
                new EventResponse
                {
                    Name = "Method3",
                    Message = "eeee",
                    Timestamp = DateTime.Now.AddMilliseconds(150),
                    Attributes = null
                }
            }
        });
        return;
        var response = await client.GetAsync($"{ApiConstants.ApiUrl}/traces?name=string2");
        traces = await response.Content.ReadFromJsonAsync<List<TraceResponse>>() ?? new List<TraceResponse>();
    }

}