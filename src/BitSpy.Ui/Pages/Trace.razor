@page "/traces"
@using BitSpy.Ui.Response
@inject HttpClient client

<PageTitle>Traces</PageTitle>

<h1>Traces</h1>


<form @onsubmit="async () => await Search()">
    <label>Duration</label>
    <input type="number" @bind="_traceDuration" placeholder="Search by trace duration..."/>
    <label>Trace counter</label>
    <input type="number" @bind="_traceCounter" placeholder="Search by trace counter..."/>
    <button type="submit" >Search</button>
</form>
@if (_traces.Count == 0)
{
    <p>
        <em>There are no traces with this parameters</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Duration</th>
            <th>Attributes</th>
            <th>Events</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var trace in _traces)
        {
            <tr>
                <td>@trace.Name</td>
                <td>@trace.Duration.ToString()</td>
                <td>
                    <ul>
                        @foreach (var a in trace.Attributes)
                        {
                            <li>@a.Name: @a.Value</li>
                        }
                    </ul>
                </td>
                <td>
                    <ul>
                        @foreach (var eventRelationship in trace.Events)
                        {
                            <li>@eventRelationship.Event.Name</li>
                            <li>@eventRelationship.EventAvgDuration.ToString()</li>
                        }
                    </ul>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<TraceResponse> _traces = new();

    private long _traceDuration = 0;
    private long _traceCounter = 0;


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task Search()
    {
        await LoadData();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadData()
    {
        var response = await client.GetAsync($"{ApiConstants.ApiUrl}/bottleneck/traces?duration={_traceDuration}&traceCounter={_traceCounter}");
        _traces = await response.Content.ReadFromJsonAsync<List<TraceResponse>>() ?? new();
    }

}